generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  name       String?
  phone      String?
  role       String   @default("customer")
  orders     Order[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Provider {
  id         String   @id @default(uuid())
  name       String
  slug       String   @unique
  api_url    String?
  api_key    String?
  status     Boolean  @default(true)
  orders     Order[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Order {
  id                 String     @id @default(uuid())
  transaction_id     String
  service_id         String?
  external_service_id String?
  external_order_id  String?
  provider_id        String?
  status             String     @default("pending")
  amount             Float?
  quantity           Int?
  target_username    String
  target_url         String?
  customer_name      String?
  customer_email     String?
  provider_response  Json?
  created_at         DateTime   @default(now())
  updated_at         DateTime   @updatedAt
  completed_at       DateTime?
  metadata           Json?
  user_id            String?
  
  service            Service?   @relation(fields: [service_id], references: [id], onDelete: SetNull)
  provider           Provider?  @relation(fields: [provider_id], references: [id], onDelete: SetNull)
  logs               OrderLog[]
  
  @@index([transaction_id])
  @@index([status])
  @@index([external_order_id])
}

model OrderLog {
  id         String   @id @default(uuid())
  order_id   String
  level      String   @default("info")
  message    String
  data       Json?
  created_at DateTime @default(now())
  
  order      Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  
  @@index([order_id])
  @@index([level])
}

model BatchProcessLog {
  id               String   @id @default(uuid())
  type             String
  total_processed  Int      @default(0)
  successful       Int      @default(0)
  failed           Int      @default(0)
  data             Json?
  created_at       DateTime @default(now())
}

model WebhookLog {
  id           String    @id @default(uuid())
  webhook_type String
  source       String
  payload      Json
  processed    Boolean   @default(false)
  received_at  DateTime  @default(now())
  processed_at DateTime?
  error        String?

  @@index([webhook_type])
  @@index([processed])
}

model Service {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float?
  type        String?
  status      String   @default("active")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  metadata    Json?
  
  orders      Order[]
  
  @@index([type])
  @@index([status])
}

model Category {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  status      Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  metadata    Json?
  
  @@index([slug])
  @@index([status])
} 